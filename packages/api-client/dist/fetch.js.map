{"version":3,"sources":["../src/fetch.ts"],"sourcesContent":["import { ServerUnavailableError } from './errors';\n\nexport interface ResponseError {\n  name: string;\n  message: string;\n}\n\nexport interface RequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: string;\n}\n\nexport interface FetchImplementation {\n  (url: Request | string | URL, config?: RequestOptions): Promise<Response>;\n}\n\nlet fetchImplementation: FetchImplementation;\n// eslint-disable-next-line no-undef\nif (\n  typeof window !== 'undefined' &&\n  Object.hasOwnProperty.call(window, 'fetch')\n) {\n  // eslint-disable-next-line no-undef\n  fetchImplementation = window.fetch.bind(window);\n}\n\nexport function setFetchImplementation(implementation: FetchImplementation) {\n  fetchImplementation = implementation;\n}\n\nexport async function fetchOrThrowIfUnavailable(\n  url: Request | string | URL,\n  config?: RequestOptions,\n): Promise<Response> {\n  try {\n    const response = await fetchImplementation(url, config);\n    return response;\n  } catch (e) {\n    if (e instanceof Error && e.message === 'Failed to fetch') {\n      // apply more helpful message if the server is not available\n      throw new ServerUnavailableError(\n        'The server is unavailable. Please check with your system administrator that the address is set correctly, and that it is running',\n      );\n    }\n\n    throw e; // some other unhandled error\n  }\n}\n\nexport async function getResponseErrorSafely(\n  response: Response,\n): Promise<{ error: ResponseError }> {\n  try {\n    return await response.json();\n  } catch (e) {\n    // log json parsing errors, but still return a valid object\n    // eslint-disable-next-line no-console\n    console.warn(`getResponseJsonSafely: Error parsing JSON: ${e}`);\n    return {\n      error: { name: 'JSONParseError', message: `Error parsing JSON: ${e}` },\n    };\n  }\n}\n"],"names":["setFetchImplementation","fetchOrThrowIfUnavailable","getResponseErrorSafely","fetchImplementation","window","Object","hasOwnProperty","call","fetch","bind","implementation","url","config","response","e","Error","message","ServerUnavailableError","json","console","warn","error","name"],"mappings":";;;;;;;;;;;IA2BgBA,sBAAsB,MAAtBA;IAIMC,yBAAyB,MAAzBA;IAmBAC,sBAAsB,MAAtBA;;wBAlDiB;AAiBvC,IAAIC;AACJ,oCAAoC;AACpC,IACE,OAAOC,WAAW,eAClBC,OAAOC,cAAc,CAACC,IAAI,CAACH,QAAQ,UACnC;IACA,oCAAoC;IACpCD,sBAAsBC,OAAOI,KAAK,CAACC,IAAI,CAACL;AAC1C,CAAC;AAEM,SAASJ,uBAAuBU,cAAmC,EAAE;IAC1EP,sBAAsBO;AACxB;AAEO,eAAeT,0BACpBU,GAA2B,EAC3BC,MAAuB,EACJ;IACnB,IAAI;QACF,MAAMC,WAAW,MAAMV,oBAAoBQ,KAAKC;QAChD,OAAOC;IACT,EAAE,OAAOC,GAAG;QACV,IAAIA,aAAaC,SAASD,EAAEE,OAAO,KAAK,mBAAmB;YACzD,4DAA4D;YAC5D,MAAM,IAAIC,8BAAsB,CAC9B,oIACA;QACJ,CAAC;QAED,MAAMH,EAAE,CAAC,6BAA6B;IACxC;AACF;AAEO,eAAeZ,uBACpBW,QAAkB,EACiB;IACnC,IAAI;QACF,OAAO,MAAMA,SAASK,IAAI;IAC5B,EAAE,OAAOJ,GAAG;QACV,2DAA2D;QAC3D,sCAAsC;QACtCK,QAAQC,IAAI,CAAC,CAAC,2CAA2C,EAAEN,EAAE,CAAC;QAC9D,OAAO;YACLO,OAAO;gBAAEC,MAAM;gBAAkBN,SAAS,CAAC,oBAAoB,EAAEF,EAAE,CAAC;YAAC;QACvE;IACF;AACF"}