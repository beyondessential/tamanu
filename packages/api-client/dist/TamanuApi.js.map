{"version":3,"sources":["../src/TamanuApi.ts"],"sourcesContent":["/// <reference path=\"../../shared/types/errors.d.ts\" />\n/// <reference path=\"../../shared/types/buildAbility.d.ts\" />\n\nimport qs from 'qs';\n\nimport type { AnyAbility, PureAbility } from '@casl/ability';\nimport { SERVER_TYPES } from '@tamanu/constants';\nimport { NotFoundError, ForbiddenError } from '@tamanu/shared/errors';\nimport { Permission, buildAbilityForUser } from '@tamanu/shared/permissions/buildAbility';\n\nimport {\n  AuthExpiredError,\n  ServerResponseError,\n  VersionIncompatibleError,\n  getVersionIncompatibleMessage,\n} from './errors';\nimport {\n  RequestOptions,\n  fetchOrThrowIfUnavailable,\n  getResponseErrorSafely,\n} from './fetch';\n\nexport interface UserResponse {\n  id: string;\n}\n\nexport type AuthFailureHandler = (message: string) => void;\nexport type VersionIncompatibleHandler = (message: string) => void;\n\nexport interface QueryData {\n  [key: string]: string | number | boolean;\n}\n\nexport interface FetchConfig extends RequestOptions {\n  /**\n   * If true, the Response object will be returned instead of the parsed JSON.\n   *\n   * Defaults to false.\n   */\n  returnResponse?: boolean;\n\n  /**\n   * If true, the Response object will be thrown instead of attempting to parse\n   * an error from the response body.\n   *\n   * Defaults to false.\n   */\n  throwResponse?: boolean;\n}\n\nexport interface ChangePasswordArgs {\n  email: string;\n}\n\nexport interface LoginOutput<T extends AnyAbility = PureAbility> {\n  user: UserResponse;\n  token: string;\n  localisation: object;\n  server: string;\n  ability: T;\n  role: string;\n}\n\nexport class TamanuApi {\n  agentName: string;\n  agentVersion: string;\n  deviceId: string;\n\n  #host?: string;\n  #prefix?: string;\n\n  #onAuthFailure?: AuthFailureHandler;\n  #onVersionIncompatible?: VersionIncompatibleHandler;\n  #authHeader?: Record<string, string>;\n\n  lastRefreshed?: number;\n  user?: UserResponse;\n\n  constructor(agentName: string, agentVersion: string, deviceId: string) {\n    this.agentName = agentName;\n    this.agentVersion = agentVersion;\n    this.deviceId = deviceId;\n  }\n\n  setHost(host: string) {\n    const canonicalHost = host.endsWith('/') ? host.slice(0, -1) : host;\n    this.#host = canonicalHost;\n    this.#prefix = `${canonicalHost}/v1`;\n  }\n\n  getHost(): string | undefined {\n    return this.#host;\n  }\n\n  setAuthFailureHandler(handler: AuthFailureHandler) {\n    this.#onAuthFailure = handler;\n  }\n\n  setVersionIncompatibleHandler(handler: VersionIncompatibleHandler) {\n    this.#onVersionIncompatible = handler;\n  }\n\n  async login(\n    host: string,\n    email: string,\n    password: string,\n  ): Promise<LoginOutput> {\n    this.setHost(host);\n    const response = await this.post(\n      'login',\n      {\n        email,\n        password,\n        deviceId: this.deviceId,\n      },\n      { returnResponse: true },\n    );\n    const serverType = response.headers.get('X-Tamanu-Server');\n    if (![SERVER_TYPES.LAN, SERVER_TYPES.SYNC].includes(serverType)) {\n      throw new Error(`Tamanu server type '${serverType}' is not supported.`);\n    }\n\n    const {\n      token,\n      localisation,\n      server = {},\n      permissions,\n      centralHost,\n      role,\n    } = await response.json();\n    server.type = serverType;\n    server.centralHost = centralHost;\n    this.setToken(token);\n\n    const { user, ability } = await this.fetchUserData(permissions);\n    return { user, token, localisation, server, ability, role };\n  }\n\n  async fetchUserData(permissions?: Permission[]) {\n    const user = await this.get('user/me');\n    this.lastRefreshed = Date.now();\n    this.user = user;\n\n    if (!permissions) {\n      // TODO: fetch permissions from server\n      return { user, ability: buildAbilityForUser(user, []) };\n    }\n\n    const ability = buildAbilityForUser(user, permissions);\n    return { user, ability };\n  }\n\n  async requestPasswordReset(host: string, email: string) {\n    this.setHost(host);\n    return this.post('resetPassword', { email });\n  }\n\n  async changePassword(host: string, args: ChangePasswordArgs) {\n    this.setHost(host);\n    return this.post('changePassword', args);\n  }\n\n  async refreshToken() {\n    try {\n      const response = await this.post('refresh');\n      const { token } = response;\n      this.setToken(token);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  }\n\n  setToken(token: string) {\n    this.#authHeader = { authorization: `Bearer ${token}` };\n  }\n\n  async fetch(\n    endpoint: string,\n    query: QueryData = {},\n    config: FetchConfig = {},\n  ) {\n    if (!this.#host) {\n      throw new Error(\"API can't be used until the host is set\");\n    }\n\n    const { headers, returnResponse = false, throwResponse = false, ...otherConfig } = config;\n    const queryString = qs.stringify(query || {});\n    const path = `${endpoint}${query ? `?${queryString}` : ''}`;\n    const url = `${this.#prefix}/${path}`;\n    const response = await fetchOrThrowIfUnavailable(url, {\n      headers: {\n        ...this.#authHeader,\n        ...headers,\n        'X-Tamanu-Client': this.agentName,\n        'X-Version': this.agentVersion,\n      },\n      ...otherConfig,\n    });\n\n    if (response.ok) {\n      if (returnResponse) {\n        return response;\n      }\n\n      if (response.status === 204) {\n        return null;\n      }\n\n      return response.json();\n    }\n\n    if (throwResponse) {\n      throw response;\n    }\n\n    return this.extractError(endpoint, response);\n  }\n\n  /**\n   * Handle errors from the server response.\n   *\n   * Generally only used internally.\n   */\n  async extractError(endpoint: string, response: Response) {\n    const { error } = await getResponseErrorSafely(response);\n    const message = error?.message || response.status.toString();\n\n    // handle forbidden error and trigger catch all modal\n    if (response.status === 403 && error) {\n      throw new ForbiddenError(message);\n    }\n\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    // handle auth expiring\n    if (\n      response.status === 401 &&\n      endpoint !== 'login' &&\n      this.#onAuthFailure\n    ) {\n      const message = 'Your session has expired. Please log in again.';\n      this.#onAuthFailure(message);\n      throw new AuthExpiredError(message);\n    }\n\n    // handle version incompatibility\n    if (response.status === 400 && error) {\n      const versionIncompatibleMessage = getVersionIncompatibleMessage(\n        error,\n        response,\n      );\n      if (versionIncompatibleMessage) {\n        if (this.#onVersionIncompatible) {\n          this.#onVersionIncompatible(versionIncompatibleMessage);\n        }\n        throw new VersionIncompatibleError(versionIncompatibleMessage);\n      }\n    }\n\n    throw new ServerResponseError(`Server error response: ${message}`);\n  }\n\n  async get(endpoint: string, query: QueryData = {}, config: FetchConfig = {}) {\n    return this.fetch(endpoint, query, { ...config, method: 'GET' });\n  }\n\n  async download(endpoint: string, query: QueryData = {}) {\n    const response = await this.fetch(endpoint, query, {\n      returnResponse: true,\n    });\n    const blob = await response.blob();\n    return blob;\n  }\n\n  async post<T>(endpoint: string, body?: T, config: FetchConfig = {}) {\n    return this.fetch(\n      endpoint,\n      {},\n      {\n        body: body && JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        ...config,\n        method: 'POST',\n      },\n    );\n  }\n\n  async put<T>(endpoint: string, body?: T, config: FetchConfig = {}) {\n    return this.fetch(\n      endpoint,\n      {},\n      {\n        body: body && JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        ...config,\n        method: 'PUT',\n      },\n    );\n  }\n\n  async delete(\n    endpoint: string,\n    query: QueryData = {},\n    config: FetchConfig = {},\n  ) {\n    return this.fetch(endpoint, query, { ...config, method: 'DELETE' });\n  }\n}\n"],"names":["TamanuApi","setHost","host","canonicalHost","endsWith","slice","prefix","getHost","setAuthFailureHandler","handler","onAuthFailure","setVersionIncompatibleHandler","onVersionIncompatible","login","email","password","response","post","deviceId","returnResponse","serverType","headers","get","SERVER_TYPES","LAN","SYNC","includes","Error","token","localisation","server","permissions","centralHost","role","json","type","setToken","user","ability","fetchUserData","lastRefreshed","Date","now","buildAbilityForUser","requestPasswordReset","changePassword","args","refreshToken","e","console","error","authHeader","authorization","fetch","endpoint","query","config","throwResponse","otherConfig","queryString","qs","stringify","path","url","fetchOrThrowIfUnavailable","agentName","agentVersion","ok","status","extractError","getResponseErrorSafely","message","toString","ForbiddenError","NotFoundError","AuthExpiredError","versionIncompatibleMessage","getVersionIncompatibleMessage","VersionIncompatibleError","ServerResponseError","method","download","blob","body","JSON","put","delete","constructor"],"mappings":"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"}