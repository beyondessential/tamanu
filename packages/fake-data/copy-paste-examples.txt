({ generateEachDataType } = require('@tamanu/fake-data/populateDb'))
for (let i = 0; i < 5000; i++) {
  console.log(`Generating set ${i + 1}/5000...`);
  await generateEachDataType(models);
}
console.timeEnd('generate-5000-sets');

 Option 2: Controlled concurrency (recommended for high volume)
 const { default: pLimit } = await import('p-limit');
 const limit = pLimit(50);  Limit to 50 concurrent operations
 
 const promises = Array.from({ length: 5000 }, (_, i) => 
   limit(() => generateEachDataType(models).then(() => {
     console.log(`Completed set ${i + 1}/5000...`);
   }))
 );
 
 console.time('generate-5000-sets');
 await Promise.all(promises);
console.timeEnd('generate-5000-sets');

 Option 3: Batch processing (best for very high volume)
 
 
 ({ generateEachDataType } = require('@tamanu/fake-data/populateDb'))
 const batchSize = 1000;
 const totalSets = 5000;
 console.time('generate-5000-sets');
 for (let batch = 0; batch < totalSets; batch += batchSize) {
   const batchStartTime = Date.now();
   const batchPromises = Array.from({ length: Math.min(batchSize, totalSets - batch) }, (_, i) => {
     const setIndex = batch + i + 1;
     return generateEachDataType(models).then(() => {
       console.log(`Completed set ${setIndex}/${totalSets}...`);
     });
   });
   
   await Promise.all(batchPromises);
   const batchEndTime = Date.now();
   const batchDuration = (batchEndTime - batchStartTime) / 1000; // Convert to seconds
   const batchNumber = Math.floor(batch / batchSize) + 1;
   const totalBatches = Math.ceil(totalSets / batchSize);
   console.log(`Completed batch ${batchNumber}/${totalBatches} in ${batchDuration.toFixed(2)}s`);
 }
 console.timeEnd('generate-5000-sets');


Baseline debug log
{"startedAt":"2025-07-31T21:42:40.002Z",
"since":-1,"changesCount":356408,"
completedAt":"2025-07-31T21:42:52.057Z"}

Changes debug log
{"startedAt":"2025-07-31T22:03:00.057Z",
"since":-1,"changesCount":356408,"
completedAt":"2025-07-31T22:03:16.376Z"}


 SELECT * FROM logs.debug_logs 
WHERE type = 'syncLookupUpdate' 
  AND (info->>'changesCount')::integer > 0
ORDER BY (info->>'startedAt')::timestamp DESC;

Autodeploy before
id   | 07f0595c-d118-45c1-a4cc-5804a0694d91
type | syncLookupUpdate
info | {"startedAt":"2025-08-01T02:16:40.003Z","
since":-1,"changesCount":759715,"
completedAt":"2025-08-01T02:17:11.479Z"}


Autodeploy after
4240f368-fa17-42a5-8113-97d20df1aa6e | 
syncLookupUpdate | 
{"startedAt":"2025-08-01T02:46:40.001Z","since":-1,
"changesCount":759715,"
completedAt":"2025-08-01T02:47:22.512Z"}


BEFORE 
759715 records
startedAt: 2025-08-01T02:16:40.003Z
completedAt: 2025-08-01T02:17:11.479Z
~31 Seconds 

AFTER
759715 records
startedAt: 2025-08-01T02:46:40.001Z
completedAt: 2025-08-01T02:47:22.512Z
~42 Seconds
