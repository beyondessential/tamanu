import React from 'react';
import styled from 'styled-components';

import { Colors } from '../../../constants';
import { TranslatedEnum, TranslatedReferenceData, TranslatedText } from '../..';
import { useTranslation } from '../../../contexts/Translation';
import { Box } from '@material-ui/core';
import { formatTimeSlot, getDose, getTranslatedFrequency } from '../../../utils/medications';
import { DRUG_ROUTE_LABELS } from '@tamanu/constants';
import {
  findAdministrationTimeSlotFromIdealTime,
  getDateFromTimeString,
} from '@tamanu/shared/utils/medication';
import { format } from 'date-fns';

const Container = styled.div`
  padding: 12px 16px;
  background-color: ${Colors.white};
  border: 1px solid ${Colors.outline};
  border-radius: 3px;
  font-size: 14px;
  color: ${Colors.darkestText};
`;

const Value = styled.div`
  font-size: 14px;
  font-weight: 500;
  color: ${Colors.darkestText};
`;

const Label = styled(Value)`
  font-weight: 400;
  color: ${Colors.midText};
  margin-bottom: 3px;
`;

const Separator = styled.hr`
  border: none;
  border-top: 1px solid ${Colors.outline};
  margin: 6px 0 16px;
`;

const DateTimeContainer = styled.div`
  display: flex;
  align-items: stretch;
`;

const ChangeLogLink = styled.a`
  color: ${Colors.primary};
  font-size: 14px;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  height: fit-content;

  &:hover {
    text-decoration: underline;
  }
`;

const MedicationInfoContainer = styled.div`
  display: flex;
  justify-content: space-between;
`;

const VerticalDivider = styled.div`
  width: 1px;
  background-color: ${Colors.outline};
  margin: 0 20px;
`;

const LowerText = styled.span`
  text-transform: lowercase;
`;

export const MarInfoPane = ({ medication, marInfo }) => {
  const { dueAt, isAutoGenerated } = marInfo;

  const { timeSlot } = findAdministrationTimeSlotFromIdealTime(new Date(dueAt));
  const slotStartTime = getDateFromTimeString(timeSlot.startTime);
  const slotEndTime = getDateFromTimeString(timeSlot.endTime);

  const { getTranslation, getEnumTranslation } = useTranslation();
  const {
    medication: medicationRef,
    frequency,
    route,
    notes,
    pharmacyNotes,
    displayPharmacyNotesInMar,
  } = medication;

  const onChangeLogClick = () => {
    // TODO: Implement change log view logic
    console.log('View change log clicked');
  };

  return (
    <Container>
      <MedicationInfoContainer>
        <Box flex={0.9}>
          <Box color={Colors.midText} mb={'3px'}>
            <TranslatedText stringId="medication.mar.medication.label" fallback="Medication" />
          </Box>
          <Box fontWeight={500} mb={'3px'}>
            <TranslatedReferenceData
              fallback={medicationRef.name}
              value={medicationRef.id}
              category={medicationRef.type}
            />
          </Box>
          <Box mb={'3px'}>
            {getDose(medication, getTranslation, getEnumTranslation)},{' '}
            {getTranslatedFrequency(frequency, getTranslation)},{' '}
            {<TranslatedEnum value={route} enumValues={DRUG_ROUTE_LABELS} />}
          </Box>
          <Box color={Colors.midText} mb={'3px'}>
            <span>{notes}</span>
            {displayPharmacyNotesInMar && pharmacyNotes && (
              <span>
                {notes && ', '}
                <TranslatedText
                  stringId="medication.mar.pharmacyNotes"
                  fallback="Pharmacy note"
                />: {pharmacyNotes}
              </span>
            )}
          </Box>
        </Box>
        <ChangeLogLink onClick={onChangeLogClick}>
          <TranslatedText stringId="medication.mar.changeLog.label" fallback="View change log" />
        </ChangeLogLink>
      </MedicationInfoContainer>
      <Separator />
      <DateTimeContainer>
        <Box flex={1}>
          <Label>
            <TranslatedText stringId="general.date.label" fallback="Date" />
          </Label>
          <Value>{format(new Date(dueAt), 'dd MMMM yyyy')}</Value>
        </Box>
        <VerticalDivider />
        <Box flex={1}>
          <Label>
            <TranslatedText stringId="general.time.label" fallback="Time" />
          </Label>
          <Value>
            <LowerText>{`${format(slotStartTime, 'ha')}-${format(slotEndTime, 'ha')}`}</LowerText>{' '}
            <span>
              (
              {isAutoGenerated ? (
                <TranslatedText
                  stringId="modal.mar.view.dueTime"
                  fallback="Due time: :dueAt"
                  replacements={{ dueAt: formatTimeSlot(new Date(dueAt)) }}
                />
              ) : (
                <TranslatedText
                  stringId="modal.mar.view.noDoseScheduled"
                  fallback="No dose scheduled"
                />
              )}
            </span>
            )
          </Value>
        </Box>
      </DateTimeContainer>
    </Container>
  );
};
