name: Synthetic Test Environment

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for synthetic tests'
        required: false
        default: 'https://facility-1.feature-synthetic-test-setup.cd.tamanu.app'
      pr_number:
        description: 'PR number (for re-triggered runs)'
        required: false
      pr_ref:
        description: 'PR ref (for re-triggered runs)'
        required: false

jobs:
  check-synthetic-test-request:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      target_url: ${{ steps.check.outputs.target_url }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        uses: actions/github-script@v7
        with:
          script: |
            let shouldRun = false;
            let targetUrl = 'https://facility-1.feature-synthetic-test-setup.cd.tamanu.app';
            let prNumber = null;
            let prRef = null;
            
            // Check if this is a workflow_dispatch event
            if (context.eventName === 'workflow_dispatch') {
              const dispatchTargetUrl = context.payload.inputs?.target_url;
              const dispatchPrNumber = context.payload.inputs?.pr_number;
              const dispatchPrRef = context.payload.inputs?.pr_ref;
              
              if (dispatchPrNumber) {
                // This is a re-triggered run, get PR info
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(dispatchPrNumber)
                });
                
                const syntheticTestMatch = pr.body?.match(/\[(?<checked>[ x])\]\s+\*\*Spin up synthetic test environment\*\* <!-- #synthetic-test -->/);
                shouldRun = syntheticTestMatch?.groups.checked === 'x';
                
                const targetUrlMatch = pr.body?.match(/Target URL:\s*(https?:\/\/[^\s\n]+)/i);
                targetUrl = dispatchTargetUrl || targetUrlMatch?.[1] || targetUrl;
                prNumber = dispatchPrNumber;
                prRef = dispatchPrRef;
              } else {
                // Manual dispatch without PR context
                shouldRun = true;
                targetUrl = dispatchTargetUrl || targetUrl;
              }
            } else {
              // This is a PR event
              const body = context.payload.pull_request?.body;
              const syntheticTestMatch = body?.match(/\[(?<checked>[ x])\]\s+\*\*Spin up synthetic test environment\*\* <!-- #synthetic-test -->/);
              const targetUrlMatch = body?.match(/Target URL:\s*(https?:\/\/[^\s\n]+)/i);
              
              shouldRun = syntheticTestMatch?.groups.checked === 'x';
              targetUrl = targetUrlMatch?.[1] || targetUrl;
              prNumber = context.payload.pull_request?.number;
              prRef = context.payload.pull_request?.head?.ref;
            }
            
            core.setOutput('should_run', shouldRun);
            core.setOutput('target_url', targetUrl);
            core.setOutput('pr_number', prNumber);
            core.setOutput('pr_ref', prRef);

  node_modules_cache:
    name: Cache node modules
    needs: check-synthetic-test-request
    if: needs.check-synthetic-test-request.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-synthetic-test-request.outputs.pr_ref || github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}
      - run: npm ci
      - uses: actions/cache/save@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

  synthetic-test:
    needs: [check-synthetic-test-request, node_modules_cache]
    if: needs.check-synthetic-test-request.outputs.should_run == 'true'
    name: Synthetic Test
    runs-on: ubuntu-latest
    env:
      TARGET_URL: ${{ needs.check-synthetic-test-request.outputs.target_url }}
      PR_NUMBER: ${{ needs.check-synthetic-test-request.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-synthetic-test-request.outputs.pr_ref || github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm ci
      - run: npm run build-shared

      - name: Update PR status with timestamp
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString().slice(0, 16).replace('T', ' ');
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.PR_SHA,
              state: 'pending',
              description: `Test iteration started at ${timestamp}`,
              context: `synthetic-test-${Date.now()}`  // Unique context per run
            });

      - name: Run artillery test
        uses: artilleryio/action-cli@v1
        with:
          command: run packages/synthetic-tests/src/scenarios/create-patient.yml --target=${{ env.TARGET_URL }}

      - name: Update PR status on success
        if: success() && env.PR_NUMBER
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER);
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state: 'success',
              description: 'Synthetic test completed successfully',
              context: 'synthetic-test'
            });

      - name: Update PR status on failure
        if: failure() && env.PR_NUMBER
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER);
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state: 'failure',
              description: 'Synthetic test failed',
              context: 'synthetic-test'
            });

      - name: Re-trigger synthetic test
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Retriggering synthetic test workflow..."
          gh workflow run ci-synthetic-test.yml \
            --ref ${{ needs.check-synthetic-test-request.outputs.pr_ref || github.head_ref || github.ref }} \
            --field target_url="${{ env.TARGET_URL }}" \
            --field pr_number="${{ env.PR_NUMBER }}" \
            --field pr_ref="${{ needs.check-synthetic-test-request.outputs.pr_ref || github.head_ref || github.ref }}"