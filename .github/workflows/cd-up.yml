name: CD Up

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
      - labeled
  push:
    branches:
      - main
      - release/*

concurrency:
  # only one build or destroy at a time, per PR/branch, but don't cancel existing runs
  group: cd-${{ github.pull_request.id || github.ref }}

permissions:
  contents: read
  pull-requests: write
  id-token: write #Â OIDC token for AWS

jobs:
  info:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'auto-deploy'))
    name: Branch info
    uses: ./.github/workflows/branch-info.yml

  build:
    needs: info
    strategy:
      fail-fast: false
      matrix:
        platform:
          - arch: linux/amd64
            runs-on: ubuntu-latest
          # - arch: linux/arm64
          #   runs-on: ubuntu-arm64 # when available
        package:
          - name: central
            path: sync-server
            target: server
          - name: facility
            path: lan
            target: server
          - name: frontend
            path: desktop
            target: frontend
          # - name: meta
          #   path: meta-server
          #   target: server
          # not yet used

    name: Build ${{ matrix.package.name }} container for ${{ matrix.platform.arch }}
    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-image-push
          role-session-name: GHA@Tamanu=BuildImage

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v4
        with:
          # in PRs, use the actual PR branch, not the merge branch
          ref: ${{ needs.info.outputs.actual_ref }}

      - name: Install QEMU
        if: matrix.platform.arch == 'linux/arm64'
        uses: docker/setup-qemu-action@v2
      - name: Setup buildkit
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform.arch }}
          cache-from: type=gha,scope=${{ needs.info.outputs.branch }}-${{ matrix.package.name }}
          cache-to: type=gha,mode=max,scope=${{ needs.info.outputs.branch }}-${{ matrix.package.name }}
          build-args: PACKAGE_PATH=${{ matrix.package.path }}
          target: ${{ matrix.package.target }}
          push: true
          labels: |
            org.opencontainers.image.vendor=BES
            org.opencontainers.image.title=Tamanu ${{ matrix.package.name }}
            org.opencontainers.image.url=https://www.bes.au/products/tamanu/
            org.opencontainers.image.source=https://github.com/beyondessential/tamanu/
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.pull_request.merged_at || github.event.head_commit.timestamp }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.package.name }}:sha-${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.package.name }}:${{ needs.info.outputs.branch }}
    outputs:
      tag: "sha-${{ github.sha }}"

  deploy:
    needs:
      - info
      - build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-deploy
          role-session-name: GHA@Tamanu=DeployUp
          mask-aws-account-id: false

      - name: Checkout this PR
        uses: actions/checkout@v4

      - name: Checkout ops
        uses: actions/checkout@v4
        with:
          repository: beyondessential/ops
          ssh-key: ${{ secrets.TAMANU_OPS_SSH }}
          path: ops
          ref: tav-913-tamanu-web
      - name: Remove ops/.git so pulumi doesn't get confused
        run: rm -rf ops/.git

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: npm

      - name: Prepare pulumi
        run: npm ci
        working-directory: ops/pulumi

      - name: Prepare database credentials
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          parse-json-secrets: true
          secret-ids: "INTERNAL_DB, ${{ vars.INTERNAL_DB_SECRET_ARN }}"

      - name: Connect to Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-secret: ${{ secrets.TAILSCALE_DBPROXY_ACCESS_OAUTH }}
          tags: tag:infra,tag:infra-gha-deploy

      # a constant secret + a variable plain text, hashed, = a new secret!
      # importantly this needs to remain constant for the lifetime of the stack
      - name: Prepare salt
        id: salt
        env:
          KEY: ${{ secrets.TAMANU_OPS_SSH }}
          NAME: ${{ needs.info.outputs.branch }}
        run: |
          salt=$(sha1sum <<< "$KEY$NAME" | cut -d' ' -f1)
          echo "::add-mask::$salt"
          echo "salt=$salt" >> $GITHUB_OUTPUT

      - name: Up!
        uses: pulumi/actions@v3
        with:
          work-dir: ops/pulumi/tamanu-internal
          command: up
          stack-name: bes/${{ needs.info.outputs.branch }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-pr: ${{ github.event_name == 'pull_request' }}
          upsert: true
          config-map: "{
            tamanu-internal:imageTag: {value: '${{ needs.build.outputs.tag }}', secret: false},
            tamanu-internal:salt: {value: '${{ steps.salt.outputs.salt }}', secret: true},
            postgresql:host: {value: '${{ vars.INTERNAL_DB_HOST }}', secret: false},
            postgresql:username: {value: '${{ env.INTERNAL_DB_USERNAME }}', secret: false},
            postgresql:password: {value: '${{ env.INTERNAL_DB_PASSWORD }}', secret: true},
            postgresql:superuser: {value: false, secret: false}
          }"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
