name: CD Up

on:
  workflow_call:
    inputs:
      deploy-name:
        type: string
        required: true
      options:
        type: string
        required: true
      image-tag:
        type: string
        required: true
      control:
        type: string
        required: true
      ref:
        type: string
        required: true
    secrets:
      PULUMI_ACCESS_TOKEN:
        required: true
      TAILSCALE_OAUTH:
        required: true
      TAMANU_OPS_SSH:
        required: true

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: ${{ inputs.deploy-name }}
    steps:
      - uses: actions/checkout@v4
      - id: setup
        uses: ./.github/actions/setup-cd
        with:
          ops-ssh-key: ${{ secrets.TAMANU_OPS_SSH }}
          ops-ref: ${{ fromJson(inputs.options).opsref }}
          tailscale-oauth: ${{ secrets.TAILSCALE_OAUTH }}
          k8s-core: ${{ fromJson(inputs.options).k8score }}

      - name: Create or check namespace
        run: |
          if kubectl get namespace tamanu-${{ inputs.deploy-name }} 2>/dev/null; then
            echo "Namespace exists, checking it's matched to this branch"
            kubectl -n tamanu-${{ inputs.deploy-name }} \
              get configmap auto-deploy -o json \
              | tee -a /dev/stderr \
              | jq -e '.data | [.repo == "${{ github.repository }}", .ref == "${{ inputs.ref }}"] | all'
          else
            kubectl create namespace tamanu-${{ inputs.deploy-name }}
            kubectl -n tamanu-${{ inputs.deploy-name }} \
              create configmap auto-deploy \
              --from-literal=repo=${{ github.repository }} \
              --from-literal=ref=${{ inputs.ref }}
          fi

          kubectl -n tamanu-${{ inputs.deploy-name }} \
            patch configmap auto-deploy \
            -p '{"data":{"control":"${{ inputs.control }}"}}'

          kubectl -n tamanu-${{ inputs.deploy-name }} \
            patch configmap auto-deploy \
            -p '{"data":{"imageTag":"${{ inputs.image-tag }}"}}'

      - name: Generate pulumi config
        id: config
        uses: actions/github-script@v7
        with:
          script: |
            const cwd = '${{ github.workspace }}';
            const { configMap } = await import(`${cwd}/packages/scripts/src/ghaCdHelpers.mjs`);
            core.setOutput('pulumi', configMap('${{ inputs.deploy-name }}', '${{ inputs.image-tag }}', ${{ inputs.options }}));

      - name: Get full stack name
        id: stack
        working-directory: ops/pulumi/stacks/${{ fromJson(inputs.options).opsstack }}
        run: |
          project=$(ruby -e 'require "yaml"; puts YAML.load(open "Pulumi.yaml")["name"]')
          echo "stackname=bes/$project/${{ inputs.deploy-name }}" >> $GITHUB_OUTPUT

      - name: Up!
        uses: pulumi/actions@v5
        with:
          work-dir: ops/pulumi/stacks/${{ fromJson(inputs.options).opsstack }}
          command: up
          stack-name: ${{ steps.stack.outputs.stackname }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-pr: true
          upsert: true
          config-map: ${{ steps.config.outputs.pulumi }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
