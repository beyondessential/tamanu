name: CD Client

on:
  workflow_dispatch:
    inputs:
      bucket:
        description: S3 bucket to upload to
        required: true
        default: release
        type: choice
        options:
          - release
          - dev or rc
  pull_request:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*.*.*

concurrency:
  group: ${{ github.workflow }}-${{ github.pull_request.id || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  id-token: write # OIDC token for AWS

jobs:
  info:
    name: Branch info
    uses: ./.github/workflows/branch-info.yml

  build:
    needs: info
    runs-on: ubuntu-latest
    name: Build desktop client
    steps:
      - name: Edit PR comment to show build status
        id: existing-comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}?pr=${{ github.event.pull_request.number }}
        with:
          result-encoding: string
          script: |
            const {repository:{pullRequest:{comments}}} = await github.graphql(`query($owner:String!, $repo:String!, $pr:Int!) {
              repository(owner:$owner, name:$repo){
                pullRequest(number:$pr) {
                  comments(first: 100, orderBy: {field: UPDATED_AT, direction: DESC}) {
                    nodes {
                      fullDatabaseId
                      body
                    }
                  }
                }
              }
            }`, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pr: context.issue?.number ?? context.pull_request?.number,
            });

            const REGEX = /(^#+ .* Desktop clients.*)\n/;
            const existing = comments.nodes.find(({body}) => REGEX.test(body));

            if (existing) {
              console.log('Updating existing comment', existing.fullDatabaseId);
              github.rest.issues.updateComment({
                comment_id: existing.fullDatabaseId,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: existing.body.replace(REGEX, `$1 (⏳ [rebuilding](${process.env.JOB_URL}))\n`),
              });
            }

            return existing?.fullDatabaseId ?? '';

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-desktop-s3
          role-session-name: GithubActionsTamanuS3

      - uses: actions/checkout@v3
        with:
          # in PRs, use the actual PR branch, not the merge branch
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      # - name: Setup buildkit
      #   uses: docker/setup-buildx-action@v2

      # - name: Build container
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     cache-from: type=gha,scope=${{ needs.info.outputs.branch }}-desktop
      #     cache-to: type=gha,mode=max,scope=${{ needs.info.outputs.branch }}-desktop
      #     target: build-desktop
      #     push: false
      #     load: true
      #     tags: working

      - name: Make output folders
        run: mkdir -p release/{appdata,unelevated}

      # - name: Start container
      #   run: |
      #     tryonce() {
      #       docker run -dit --rm --name working \
      #         -v $PWD/release:/app/packages/desktop/release \
      #         working
      #       sleep 1
      #       docker exec working echo "Container started"
      #     }

      #     tryonce || tryonce || tryonce

      # - name: Package for Linux, Mac, Windows
      #   run: |
      #     docker exec working mv /package-mac.json package.json
      #     docker exec working yarn run package-only --x64 --linux --mac --win

      # - name: Switch to AppData NSIS-only build
      #   run: docker exec working mv /package-appdata.json package.json

      # - name: Package for Windows (AppData NSIS)
      #   run: docker exec working yarn run package-only --win --x64

      # - name: Switch to MSI build
      #   run: docker exec working mv /package-msi.json package.json

      # - name: Package for Windows (MSI)
      #   run: docker exec working yarn run package-only --win --x64

      # - name: Switch to Aspen build
      #   run: docker exec working mv /package-aspen.json package.json

      # - name: Package for Windows (Aspen)
      #   run: docker exec working yarn run package-only --win --x64

      # - name: Stop container
      #   run: docker kill working

      - name: Prepare final outputs
        run: |
          sudo chown -R $USER:$USER release
          mkdir -p ops/{linux,mac,windows-{appdata,msi,system,aspen}} artifacts
          touch artifacts/TamanuSetup.x64.msi
          exit 0
          mv release/latest-linux.yml release/*.AppImage ops/linux/
          mv release/*-mac* ops/mac/
          cp release/*.msi artifacts/TamanuSetup.x64.msi
          mv release/*.msi ops/windows-msi/
          mv release/aspen/*.msi ops/windows-aspen/
          cp release/*.exe artifacts/TamanuSetup.x64.exe
          mv release/latest.yml release/*.exe* ops/windows-system/
          mv release/appdata/latest.yml release/appdata/*.exe* ops/windows-appdata/
          rm -rf release

      # - name: Use release bucket
      #   if: inputs.bucket == 'release' || startsWith(github.ref, 'refs/tags/v')
      #   run: |
      #     echo "S3_BUCKET=bes-tamanu-release-clients/${{ needs.info.outputs.version }}" >> $GITHUB_ENV
      #     echo "S3_URL=https://s3-ap-southeast-2.amazonaws.com/bes-tamanu-release-clients/${{ needs.info.outputs.version }}" >> $GITHUB_ENV

      # - name: Use dev bucket
      #   if: inputs.bucket == 'dev or rc' || !startsWith(github.ref, 'refs/tags/v')
      #   run: |
      #     echo "S3_BUCKET=bes-tamanu-dev-desktop-clients/${{ needs.info.outputs.branch }}" >> $GITHUB_ENV
      #     echo "S3_URL=https://s3.console.aws.amazon.com/s3/object/bes-tamanu-dev-desktop-clients?region=ap-southeast-2&prefix=${{ needs.info.outputs.branch }}" >> $GITHUB_ENV

      # - name: Push to S3
      #   working-directory: ops
      #   run: aws s3 sync . s3://${{ env.S3_BUCKET }} --no-progress

      - name: Prepare comment
        if: github.event_name == 'pull_request' || github.ref_type == 'tag'
        id: comment
        uses: actions/github-script@v6
        env:
          VERSION: ${{ needs.info.outputs.version }}
        with:
          result-encoding: string
          script: |
            const {S3_URL, VERSION} = process.env;
            return [
              '### :package: Desktop clients',
              '',
              `- :window: **[Windows (System)](${S3_URL}/windows-system/Tamanu+Setup+${VERSION}.exe)**`,
              `- :window:   [Windows (AppData)](${S3_URL}/windows-appdata/Tamanu+Setup+${VERSION}.exe)`,
              `- :window:   [Windows (MSI)](${S3_URL}/windows-msi/Tamanu+${VERSION}.msi)`,
              `- :window:   [Windows (Aspen)](${S3_URL}/windows-aspen/Tamanu+${VERSION}.msi)`,
              `- :apple:    [macOS (Tar)](${S3_URL}/mac/Tamanu-${VERSION}-mac.tar.xz)`,
              `- :penguin:  [Linux (AppImage)](${S3_URL}/linux/Tamanu-${VERSION}.AppImage)`,
            ].join('\n');

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          EXISTING_COMMENT_ID: ${{ steps.existing-comment.outputs.result }}
          COMMENT_BODY: ${{ steps.comment.outputs.result }}
        with:
          script: |
            if (process.env.EXISTING_COMMENT_ID) {
              console.log('Updating existing comment', process.env.EXISTING_COMMENT_ID);
              github.rest.issues.updateComment({
                comment_id: process.env.EXISTING_COMMENT_ID,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: process.env.COMMENT_BODY,
              });
            } else {
              console.log('Creating new comment');
              github.rest.issues.createComment({
                issue_number: context.issue?.number ?? context.pull_request?.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: process.env.COMMENT_BODY,
              });
            }

      - name: Push to release
        if: github.ref_type == 'tag' || github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          RELEASE_SECTION: ${{ steps.comment.outputs.result }}
          RELEASE_VERSION: '1.31.0'
        with:
          script: |
            const cwd = '${{ github.workspace }}';
            const { uploadToRelease } = await import(`${cwd}/scripts/gha-release-ops.mjs`);
            await uploadToRelease({
              fs: await import('fs/promises'),
              github,
              context,
              artifactsDir: `${cwd}/artifacts`,
              version: process.env.RELEASE_VERSION,
              section: process.env.RELEASE_SECTION,
            });
