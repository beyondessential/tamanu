name: CD

on:
  # PRs build all the time, and deploy on demand
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited

  # Special issues can opt-in PR-less branches to build and deploy
  issues:
    types:
      - opened
      - edited
      - labeled

  # Release tags build the server/web packages only
  push:
    tags:
      - 'v*.*.*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.issue.id || github.ref }}
  cancel-in-progress: false

permissions:
  contents: read # to checkout the repo
  id-token: write #Â to get an OIDC token for AWS
  pull-requests: read # to parse PRs for config
  issues: read # to parse special deploy issues

jobs:
  branch-config:
    name: Branch config
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.ref.outputs.result }}
      sha: ${{ steps.sha.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Figure branch ref and sha
        id: ref
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const cwd = '${{ github.workspace }}';
            const { parseBranchConfig } = await import(`${cwd}/packages/scripts/src/pr-cd.mjs`);
            const ref = parseBranchConfig(context);
            console.log(ref);
            return ref;

      - name: Checkout the real ref
        if: steps.ref.outputs.result != ''
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.ref.outputs.result }}
      - name: Find the real sha
        if: steps.ref.outputs.result != ''
        id: sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  check-images-exist:
    needs: branch-config
    name: Check if image was already built
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-image-push
          role-session-name: GHA@Tamanu=CheckImages

      - id: check
        run: |
          for repo in central facility frontend meta; do
            desc=$(aws ecr describe-images --repository-name=tamanu/$repo --image-ids=imageTag=sha-${{ needs.branch-config.outputs.sha }} 2>/dev/null || true)
            if [[ -z "$desc" ]]; then
              echo $repo image not found
            else
              jq -c . <<< "$desc"
              echo $repo image found, assuming existence
              echo exists=yes | tee -a $GITHUB_OUTPUT
              exit
            fi
          done
          echo exists=no | tee -a $GITHUB_OUTPUT
    outputs:
      exists: ${{ steps.check.outputs.exists }}

  images:
    needs: [branch-config, check-images-exist]
    if: needs.check-images-exist.outputs.exists != 'yes'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - arch: amd64
            runs-on: ubuntu-latest
          - arch: arm64
            runs-on: Linux-ARM64
        package:
          - name: central
            path: central-server
            target: server
          - name: facility
            path: facility-server
            target: server
          - name: frontend
            path: web
            target: frontend
          - name: meta
            path: meta-server
            target: server

    name: Image for ${{ matrix.package.name }} on ${{ matrix.platform.arch }}
    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Install docker (arm64 beta)
        if: matrix.platform.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl acl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker $USER
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock

      - name: Verify docker works
        run: docker run hello-world

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-image-push
          role-session-name: GHA@Tamanu=BuildImage

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.branch-config.outputs.ref }}

      - name: Extract version
        id: version
        run: echo "version=$(jq -r .version package.json)" >> "$GITHUB_OUTPUT"

      - name: Setup buildkit
        uses: docker/setup-buildx-action@v3

      - uses: docker/metadata-action@v5
        id: meta
        with:
          labels: |
            org.opencontainers.image.vendor=BES
            org.opencontainers.image.title=Tamanu ${{ matrix.package.name }}
            org.opencontainers.image.url=https://www.bes.au/products/tamanu/
            org.opencontainers.image.source=https://github.com/beyondessential/tamanu/
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform.arch }}
          cache-from: type=gha,scope=${{ matrix.platform.arch }}-${{ needs.branch-config.outputs.ref }}-${{ matrix.package.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform.arch }}-${{ needs.branch-config.outputs.ref }}-${{ matrix.package.name }}
          build-args: PACKAGE_PATH=${{ matrix.package.path }}
          target: ${{ matrix.package.target }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.package.name }}:sha-${{ needs.branch-config.outputs.sha }}.${{ matrix.platform.arch }}

  multi-arch:
    needs: [branch-config, images]
    strategy:
      fail-fast: false
      matrix:
        repo:
          - central
          - facility
          - frontend
          - meta

    runs-on: ubuntu-latest
    name: Multi-arch for ${{ matrix.repo }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-manifest-tool

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-image-push
          role-session-name: GHA@Tamanu=CombineImage

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Combine images
        run: |
          manifest-tool push from-args \
            --platforms linux/amd64,linux/arm64 \
            --template ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.repo }}:sha-${{ needs.branch-config.outputs.sha }}.ARCH \
            --target ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.repo }}:sha-${{ needs.branch-config.outputs.sha }}

  all-built:
    if: always() # always run even if dependencies fail
    name: All images built
    needs:
      - check-images-exist
      - images
      - multi-arch
    runs-on: ubuntu-latest
    steps:
      - if: needs.check-images-exist.outputs.exists == 'yes'
        run: "true"
      - if: needs.check-images-exist.outputs.exists != 'yes'
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  deploy-config:
    if: github.event_name == 'pull_request'
    name: Deploy config
    runs-on: ubuntu-latest
    outputs:
      up: ${{ steps.config.outputs.up }}
      down: ${{ steps.config.outputs.down }}
      go-up: ${{ steps.config.outputs.go-up }}
      go-down: ${{ steps.config.outputs.go-down }}
    steps:
      - uses: actions/checkout@v4
      - name: Parse deploy config
        id: config
        uses: actions/github-script@v7
        with:
          script: |
            const cwd = '${{ github.workspace }}';
            const { parseDeployConfig } = await import(`${cwd}/packages/scripts/src/pr-cd.mjs`);

            const allDeploys = parseDeployConfig(context.payload.pull_request ?? context.payload.issue);
            console.log(allDeploys);

            const matrix = ({ name, options }) => ({ name, options: JSON.stringify(options) });
            const up = allDeploys.filter(deploy => deploy.enabled && !deploy.options.pause).map(matrix);
            const down = allDeploys.filter(deploy => !deploy.enabled && !deploy.options.pause).map(matrix);
            console.log('Going UP', up.length);
            console.log('Going DOWN', down.length);

            core.setOutput('up', JSON.stringify(up));
            core.setOutput('down', JSON.stringify(down));
            core.setOutput('go-up', !!up.length);
            core.setOutput('go-down', !!down.length);

  deploy-up:
    needs:
      - branch-config
      - all-built
      - deploy-config
    if: always() && needs.all-built.result == 'success' && fromJson(needs.deploy-config.outputs.go-up)
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.deploy-config.outputs.up) }}
    name: Deploy ${{ matrix.name }}
    uses: ./.github/workflows/cd-up.yml
    with:
      deploy-name: ${{ matrix.name }}
      options: ${{ matrix.options }}
      image-tag: sha-${{ needs.branch-config.outputs.sha }}
    secrets:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      TAILSCALE_DBPROXY_ACCESS_OAUTH: ${{ secrets.TAILSCALE_DBPROXY_ACCESS_OAUTH }}
      TAMANU_OPS_SSH: ${{ secrets.TAMANU_OPS_SSH }}

  deploy-down:
    needs: deploy-config
    if: fromJson(needs.deploy-config.outputs.go-down)
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.deploy-config.outputs.down) }}
    name: Undeploy ${{ matrix.name }}
    uses: ./.github/workflows/cd-down.yml
    with:
      deploy-name: ${{ matrix.name }}
      options: ${{ matrix.options }}
    secrets:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      TAILSCALE_DBPROXY_ACCESS_OAUTH: ${{ secrets.TAILSCALE_DBPROXY_ACCESS_OAUTH }}
      TAMANU_OPS_SSH: ${{ secrets.TAMANU_OPS_SSH }}

  # The package-* jobs below are only triggered by tags, so we can assume that
  # github.ref and github.ref_name are set and correct.

  package-frontend:
    needs: images
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Package Frontend v${{ github.ref_name }}
    uses: ./.github/workflows/cd-package-frontend.yml

  package-servers:
    needs: images
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    name: Package Servers v${{ github.ref_name }}
    uses: ./.github/workflows/cd-package-servers.yml
