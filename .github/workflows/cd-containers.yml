name: CD Containers

on:
  pull_request:
  push:
    branches:
      - main
      - release/*
      - uat-release/*

permissions:
  contents: read
  id-token: write #Â OIDC token for AWS

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - arch: amd64
            runs-on: ubuntu-latest
          - arch: arm64
            runs-on: Linux-ARM64
        package:
          - name: central
            path: central-server
            target: server
          - name: facility
            path: facility-server
            target: server
          - name: frontend
            path: web
            target: frontend
          - name: meta
            path: meta-server
            target: server

    name: Image for ${{ matrix.package.name }} on ${{ matrix.platform.arch }}
    runs-on: ${{ matrix.platform.runs-on }}

    steps:
      - name: Install docker (arm64 beta)
        if: matrix.platform.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl acl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update

          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo usermod -aG docker $USER
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock

      - name: Verify docker works
        run: docker run hello-world

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-image-push
          role-session-name: GHA@Tamanu=BuildImage

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v4

      - name: Setup buildkit
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/${{ matrix.platform.arch }}
          cache-from: type=gha,scope=${{ github.ref }}-${{ matrix.package.name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref }}-${{ matrix.package.name }}
          build-args: PACKAGE_PATH=${{ matrix.package.path }}
          target: ${{ matrix.package.target }}
          push: true
          labels: |
            org.opencontainers.image.vendor=BES
            org.opencontainers.image.title=Tamanu ${{ matrix.package.name }}
            org.opencontainers.image.url=https://www.bes.au/products/tamanu/
            org.opencontainers.image.source=https://github.com/beyondessential/tamanu/
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.pull_request.merged_at || github.event.head_commit.timestamp }}
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.package.name }}:sha-${{ github.sha }}.${{ matrix.package.target }}
    outputs:
      tag: "sha-${{ github.sha }}.${{ matrix.package.target }}"
