name: Fake DB Dump

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/*

env:
  NODE_OPTIONS: "--max-old-space-size=6144"
  NODE_ENV: test
  NODE_MODULES_PATHS: |
    node_modules
    packages/*/node_modules
    !packages/mobile/node_modules

jobs:
  generate-fake:
    strategy:
      fail-fast: false
      matrix:
        postgres:
          - "12"
          - "14"
          - "15"
          - "16"

    name: Make a db dump of fake data for pg${{ matrix.postgres }}
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: fake-pg${{ matrix.postgres }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: yarn
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: yarn
      - run: yarn build-shared

      - name: Install and start postgres ${{ matrix.postgres }}
        run: |
          source .github/scripts/install-postgres-ubuntu.sh ${{ matrix.postgres }}
          .github/scripts/setup-postgres-for-one-package.sh fake

      - run: yarn workspace scripts run generate-fake-db
      - run: pg_dump fake --format custom --file $ARTIFACT_NAME.dump
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.dump

  upload:
    needs: ['generate-fake']
    runs-on: ubuntu-latest
    permissions:
      id-token: write # allow accessingÂ OIDC token for AWS
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-tamanu-test-data-snapshots-s3
          role-session-name: GHA@fake=generate

      - uses: actions/download-artifact@v4
        with:
          path: fake
          pattern: fake-*
          merge-multiple: true

      - name: Get minisign
        run: |
          set -ex
          curl --proto '=https' --tlsv1.2 -LO https://github.com/jedisct1/minisign/releases/download/0.11/minisign-0.11-linux.tar.gz
          echo 'f0a0954413df8531befed169e447a66da6868d79052ed7e892e50a4291af7ae0  minisign-0.11-linux.tar.gz' | sha256sum -c
          tar -xvf minisign-0.11-linux.tar.gz
          mv minisign-linux/x86_64/minisign .
      - name: Sign artifacts
        env:
          MINISIGN_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          set -e
          echo "$MINISIGN_KEY" > minisign.key
          set -x
          ./minisign -R \
            -s minisign.key \
            -p minisign.pub
          for file in fake/*; do
            ./minisign -S \
              -s minisign.key \
              -m $file \
              -x $file.sig \
              -t "built on $(date --iso-8601=seconds) from tamanu/${{ github.sha }}"
          done
          rm minisign.*

      - name: Push to S3
        run: aws s3 sync fake s3://bes-tamanu-test-data-snapshots/${{ github.sha }} --no-progress
