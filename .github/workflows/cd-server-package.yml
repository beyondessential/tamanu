name: CD Server Package

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}

permissions:
  contents: read
  id-token: write #Â OIDC token for AWS

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        package:
          - central
          - facility

    name: Pack ${{ matrix.package }} for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials (image)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-image-pull
          role-session-name: GHA@Tamanu=WebPackage

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract version from image
        id: version
        run: |
          docker image inspect ${{ steps.login-ecr.outputs.registry }}/tamanu/${{ matrix.package }}:sha-${{ github.sha }}.amd64 \
            | jq 'version"\(.[0] | .Config.Labels["org.opencontainers.image.version"])"' -r >> "$GITHUB_OUTPUT"

      - name: Extract files from image
        run: |
          docker create --name working ${{ steps.login-ecr.outputs.registry }}/tamanu/frontend:sha-${{ github.sha }}.amd64
          docker cp working:/app release-v${{ steps.version.outputs.version }}
          docker rm working

      # This will replace the line "cwd: '.'" for the appropriate package, i.e.
      # "cwd: 'packages/facility-server'" in the new build folder for each pm2.config file.
      - name: Prepare production configuration
        run: |
          set -ex
          sed -E \
            "s|cwd: '.',( //.*)?|cwd: 'packages/${{ matrix.package }}-server',|" \
            packages/${{ matrix.package }}-server/pm2.config.js \
          > release-v${{ steps.version.outputs.version }}/pm2.config.js

      - name: Prepare artifact output
        run: |
          zip -r \
            'release-v${{ steps.version.outputs.version }}.zip' \
            'release-v${{ steps.version.outputs.version }}'
          tar -cf \
            '${{ matrix.package }}-${{ steps.version.outputs.version }}-linux-amd64.tar' \
            'release-v${{ steps.version.outputs.version }}'
          zstd --rm --adapt -T0 -10 \
            '${{ matrix.package }}-${{ steps.version.outputs.version }}-linux-amd64.tar'

      - name: Sign build
        shell: bash
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          curl -Lo bestool https://tools.ops.tamanu.io/bestool/gha/${{ runner.os }}-${{ runner.arch }}
          chmod +x bestool
          ./bestool crypto sign --key-env SIGNING_KEY  \
            --comment 'ts={timestamp} repo=${{ github.repository }} commit=${{ github.sha }} gharun=${{ github.run_id }}' \
            '${{ matrix.package }}-${{ steps.version.outputs.version }}-linux-amd64.tar.zst'

      - name: Upload artifact for next step
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}-${{ steps.version.outputs.version }}
          path: '${{ matrix.package }}-${{ steps.version.outputs.version }}-linux-amd64.zip'
          retention-days: 1

      - name: Upload final output
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.package }}-${{ steps.version.outputs.version }}
          path: '*.tar.zst*'
          retention-days: 15

      - name: Configure AWS Credentials (upload)
        if: github.event_name != 'workflow_dispatch'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-server-s3
          role-session-name: GHA@Tamanu=ServerPackage

      - name: Push to S3
        if: github.event_name != 'workflow_dispatch'
        run: |
          set -exu
          for file in *.tar.zst*; do
            aws s3 cp $file s3://bes-tamanu-release-servers/${{ steps.version.outputs.version }}/$file --no-progress
          done
    outputs:
      version: ${{ steps.version.outputs.version }}

  windows:
    needs: linux
    strategy:
      fail-fast: false
      matrix:
        package:
          - central
          - facility

    name: Pack ${{ matrix.package }} for Windows
    runs-on: windows-latest
    env:
      BUILD_NAME: "release-v${{ needs.linux.outputs.version }}"
      ARTIFACT_NAME: "${{ matrix.package }}-${{ needs.linux.outputs.version }}"
      OUTPUT_NAME: "${{ matrix.package }}-${{ needs.linux.outputs.version }}-windows"
      S3_PATH: s3://bes-tamanu-release-servers/${{ needs.linux.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: yarn

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Unzip artifact for deployment
        shell: bash
        run: unzip '${{ env.BUILD_NAME }}.zip'

      - name: Reinstall dependencies
        working-directory: ${{ env.BUILD_NAME }}
        shell: bash
        run: |
          set -ex
          rm -rfv node_modules packages/*/node_modules
          yarn config set network-timeout 600000 -g
          yarn install --frozen-lockfile --production

      - name: Prepare final output
        shell: bash
        run: |
          set -ex
          tar -cf '${{ env.OUTPUT_NAME }}.tar' '${{ env.BUILD_NAME }}'
          zstd --rm --adapt -T0 -10 '${{ env.OUTPUT_NAME }}.tar' -o '${{ env.OUTPUT_NAME }}.tar.zst'

      - name: Sign build
        shell: bash
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          curl -Lo bestool https://tools.ops.tamanu.io/bestool/gha/${{ runner.os }}-${{ runner.arch }}
          chmod +x bestool
          ./bestool crypto sign --key-env SIGNING_KEY \
            --comment 'ts={timestamp} repo=${{ github.repository }} commit=${{ github.sha }} gharun=${{ github.run_id }}' \
            '${{ env.OUTPUT_NAME }}.tar.zst'

      - name: Upload final build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: '*.tar.zst*'
          retention-days: 15

      - name: Configure AWS Credentials (upload)
        if: github.event_name != 'workflow_dispatch'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::143295493206:role/gha-server-s3
          role-session-name: GHA@Tamanu=ServerPackage

      - name: Push to S3
        if: github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          set -exu
          for file in *.tar.zst*; do
            aws s3 cp $file ${{ env.S3_PATH }}/$file --no-progress
          done
