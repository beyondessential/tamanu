name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: "--max-old-space-size=6144"
  NODE_ENV: test
  NODE_MODULES_PATHS: |
    node_modules
    packages/*/node_modules

jobs:
  node_version:
    name: Check node version consistency
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Check package.json against .node-version
        run: |
          json=$(jq -r .dependencies.node package.json | cut -c2-)
          file=$(cat .node-version | cut -c2-)
          echo "Node.js in package.json:  $json"
          echo "Node.js in .node-version: $file"
          test "$json" = "$file"
      - name: Check dockerfile against .node-version
        run: |
          file=$(cat .node-version | cut -c2- | cut -d. -f1)
          dckr=$(grep -oP '(?<=^FROM node:)\d+' Dockerfile)
          echo "Node.js major in Dockerfile:    $dckr"
          echo "Node.js major in .node-version: $file"
          test "$dckr" = "$file"

  node_modules_cache:
    name: Cache node modules
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        id: cache
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}
      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

  test:
    needs: node_modules_cache
    strategy:
      fail-fast: false
      matrix:
        include:
          - { package: "@tamanu/facility-server", shard: 1/6, postgres: 16 }
          - { package: "@tamanu/facility-server", shard: 2/6, postgres: 16 }
          - { package: "@tamanu/facility-server", shard: 3/6, postgres: 16 }
          - { package: "@tamanu/facility-server", shard: 4/6, postgres: 16 }
          - { package: "@tamanu/facility-server", shard: 5/6, postgres: 16 }
          - { package: "@tamanu/facility-server", shard: 6/6, postgres: 16 }
          - { package: "@tamanu/central-server",  shard: 1/6, postgres: 16 }
          - { package: "@tamanu/central-server",  shard: 2/6, postgres: 16 }
          - { package: "@tamanu/central-server",  shard: 3/6, postgres: 16 }
          - { package: "@tamanu/central-server",  shard: 4/6, postgres: 16 }
          - { package: "@tamanu/central-server",  shard: 5/6, postgres: 16 }
          - { package: "@tamanu/central-server",  shard: 6/6, postgres: 16 }
          - { package: "@tamanu/database",                    postgres: 12 }
          - { package: "@tamanu/database",                    postgres: 14 }
          - { package: "@tamanu/database",                    postgres: 16 }
          - { package: "@tamanu/database",                    postgres: 17 }
          - { package: "@tamanu/shared",                                   }
          - { package: "@tamanu/utils",                                    }
          - { package: "@tamanu/web-frontend" }
          - { package: "@tamanu/settings" }

    name: Test ${{ matrix.package }} ${{ matrix.shard }} (pg=${{ matrix.postgres || 'no' }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm i
      - run: npm run build-shared
      - run: npm run --workspace ${{ matrix.package }} build

      - name: Install and start postgres if needed
        if: matrix.postgres
        run: |
          source .github/scripts/install-postgres-ubuntu.sh ${{ matrix.postgres }}
          .github/scripts/setup-postgres-for-one-package.sh ${{ matrix.package }}

      - name: Run tests
        env:
          package: ${{ matrix.package }}
          shard: ${{ matrix.shard }}
        run: |
          [[ -z "$shard" ]] || shard="--shard $shard"
          npm run --workspace "$package" test -- $shard

  build-all:
    needs: node_modules_cache
    name: Build all packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm i
      - run: npm run build

  lint:
    needs: node_modules_cache
    name: Lint packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}
      - run: npm i

      - name: Lint errors
        run: npm run lint-all -- --quiet

      - name: Lint warnings
        run: npm run lint-all

  storybook:
    needs: node_modules_cache
    # Workaround for define plugin conflict warning
    env:
      NODE_ENV: development
    continue-on-error: true
    name: Test storybook
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm i
      - run: npm run build-shared
      - run: npm run --workspace @tamanu/web-frontend test-storybook

  migrations:
    needs: node_modules_cache
    strategy:
      fail-fast: false
      matrix:
        server:
          - central-server
          - facility-server
        postgres:
          - '12'
          - '14'
          - '15'
          - '16'
          - '17'

    name: Test migrations server=${{ matrix.server }} pg=${{ matrix.postgres }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm i
      - run: npm run build-shared

      - name: Install and start postgres ${{ matrix.postgres }}
        run: |
          source .github/scripts/install-postgres-ubuntu.sh ${{ matrix.postgres }}
          .github/scripts/setup-postgres-for-one-package.sh migrations

      - run: scripts/apply_and_revert_server_migrations.sh ${{ matrix.server }}

  test-mobile:
    needs: node_modules_cache
    name: Test mobile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm i
      - run: npm run build-shared

      - run: npm run test
        working-directory: packages/mobile

  test-facility-offline:
    needs: node_modules_cache
    name: Test the facility server with the central server being down
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}
      - run: npm i

      - name: Install and start postgres
        run: |
          source .github/scripts/install-postgres-ubuntu.sh 16
          .github/scripts/test-facility-offline.sh setup-postgres
      - name: Build central and facility servers
        run: .github/scripts/test-facility-offline.sh build
      - name: Start a central server
        run: .github/scripts/test-facility-offline.sh central-start
      - name: Start a facility server
        run: .github/scripts/test-facility-offline.sh facility-start
      - name: Stop the servers and print logs
        run: .github/scripts/test-facility-offline.sh stop-and-print
      - name: Start a facility server again without a central one
        run: .github/scripts/test-facility-offline.sh facility-start-again

  test-package-lock:
    needs: node_modules_cache
    name: Check package-lock.json is up to date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}
      - run: npm i
      - run: git diff --exit-code

  dbt-model:
    needs: node_modules_cache
    name: DBT model up to date
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - name: Install and start postgres
        run: |
          source .github/scripts/install-postgres-ubuntu.sh 17

          createuser --superuser tamanu
          psql -c "ALTER USER tamanu PASSWORD 'tamanu';" postgres
          createdb -O tamanu central
          createdb -O tamanu facility

      - name: Build
        run: |
          npm i
          npm run build-shared
          npm run --workspace @tamanu/central-server build
      - name: Configure Tamanu
        run: |
          echo '{"db":{"host":"localhost","name":"central","username":"tamanu","password":"tamanu"}}' > packages/central-server/config/local.json5

      - name: Run Migrations
        run: |
          npm run --workspace @tamanu/central-server start upgrade

      - name: Check model is up to date
        run: |
          npm run dbt-generate-model --fail-on-missing-config
          if [[ -n $(git status --porcelain=v2 database) ]]; then
              git diff -- database
              echo "The dbt model is behind the Tamanu database!"
              echo "Run 'npm run dbt-generate-model' and commit the result."
              exit 1
          fi

      - name: Check model is valid (ie that docs can generate)
        run: |
          pip3 install dbt-core dbt-postgres
          npm run dbt-generate-docs

  dbt-todos:
    needs: node_modules_cache
    name: DBT model TODOs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: npm
      - uses: actions/cache/restore@v3
        with:
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          path: ${{ env.NODE_MODULES_PATHS }}

      - run: npm i
      - run: npm run dbt-check-todos

  typos:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check spelling
        uses: crate-ci/typos@master
        with:
          config: .typos.toml

  # Dummy job to have a stable name for PR requirements
  tests-pass:
    if: always() # always run even if dependencies fail
    name: Tests pass
    needs:
      - node_version
      - test
      - build-all
      - lint
      - migrations
      - test-mobile
      - test-facility-offline
      - test-package-lock
      - dbt-model
      - dbt-todos
      - typos
    runs-on: ubuntu-latest
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
